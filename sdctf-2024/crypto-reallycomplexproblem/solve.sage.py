

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_49273345737246996726590603353583355178086800698760969592130868354337851978351471620667942269644899697191123465795949428583500297970396171368191380368221413824213319974264518589870025675552877945771766939806196622646891697942424667182133501533291103995066016684839583945343041150542055544031158418413191646229 = Integer(49273345737246996726590603353583355178086800698760969592130868354337851978351471620667942269644899697191123465795949428583500297970396171368191380368221413824213319974264518589870025675552877945771766939806196622646891697942424667182133501533291103995066016684839583945343041150542055544031158418413191646229); _sage_const_258624816670939796343917171898007336047104253546023541021805133600172647188279270782668737543819875707355397458629869509819636079018227591566061982865881273727207354775997401017597055968919568730868113094991808052722711447543117755613371129719806669399182197476597667418343491111520020195254569779326204447367 = Integer(258624816670939796343917171898007336047104253546023541021805133600172647188279270782668737543819875707355397458629869509819636079018227591566061982865881273727207354775997401017597055968919568730868113094991808052722711447543117755613371129719806669399182197476597667418343491111520020195254569779326204447367); _sage_const_117299665605343495500066013555546076891571528636736883265983243281045565874069282036132569271343532425435403925990694272204217691971976685920273893973797616802516331406709922157786766589075886459162920695874603236839806916925542657466542953678792969287219257233403203242858179791740250326198622797423733569670 = Integer(117299665605343495500066013555546076891571528636736883265983243281045565874069282036132569271343532425435403925990694272204217691971976685920273893973797616802516331406709922157786766589075886459162920695874603236839806916925542657466542953678792969287219257233403203242858179791740250326198622797423733569670); _sage_const_617172569155876114160249979318183957086418478036314203819815011219450427773053947820677575617572314219592171759604357329173777288097332855501264419608220917546700717670558690359302077360008042395300149918398522094125315589513372914540059665197629643888216132356902179279651187843326175381385350379751159740993 = Integer(617172569155876114160249979318183957086418478036314203819815011219450427773053947820677575617572314219592171759604357329173777288097332855501264419608220917546700717670558690359302077360008042395300149918398522094125315589513372914540059665197629643888216132356902179279651187843326175381385350379751159740993); _sage_const_1671911043329305519973004484847472037065973037107329742284724545409541682312778072234 = Integer(1671911043329305519973004484847472037065973037107329742284724545409541682312778072234); _sage_const_10 = Integer(10); _sage_const_70 = Integer(70); _sage_const_193097758392744599866999513352336709963617764800771451559221624428090414152709219472155 = Integer(193097758392744599866999513352336709963617764800771451559221624428090414152709219472155); _sage_const_68 = Integer(68); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_20 = Integer(20)
from CRSA import GaussianRational, decrypt

ciphertext = _sage_const_49273345737246996726590603353583355178086800698760969592130868354337851978351471620667942269644899697191123465795949428583500297970396171368191380368221413824213319974264518589870025675552877945771766939806196622646891697942424667182133501533291103995066016684839583945343041150542055544031158418413191646229  - _sage_const_258624816670939796343917171898007336047104253546023541021805133600172647188279270782668737543819875707355397458629869509819636079018227591566061982865881273727207354775997401017597055968919568730868113094991808052722711447543117755613371129719806669399182197476597667418343491111520020195254569779326204447367  * I
N = -_sage_const_117299665605343495500066013555546076891571528636736883265983243281045565874069282036132569271343532425435403925990694272204217691971976685920273893973797616802516331406709922157786766589075886459162920695874603236839806916925542657466542953678792969287219257233403203242858179791740250326198622797423733569670  + _sage_const_617172569155876114160249979318183957086418478036314203819815011219450427773053947820677575617572314219592171759604357329173777288097332855501264419608220917546700717670558690359302077360008042395300149918398522094125315589513372914540059665197629643888216132356902179279651187843326175381385350379751159740993 *I
a = _sage_const_1671911043329305519973004484847472037065973037107329742284724545409541682312778072234  * _sage_const_10 **_sage_const_70  + _sage_const_193097758392744599866999513352336709963617764800771451559221624428090414152709219472155  * _sage_const_10 **_sage_const_68  * I

def get_coefficients(f):
     result = []
     coeffs = reversed(f.list())
     for c in coeffs:
         result.extend([c.real(), c.imag()])
     return result

def get_polynomial_power(f, n):
    return expand(f**n)


def coppersmith(f, R_r, R_i, N,  k=_sage_const_3 ):
    # create lattice of polynomial powers
    polynomial_rows = [get_coefficients(get_polynomial_power(f**i)) for i in range(k, _sage_const_0 , -_sage_const_1 )]
    polynomial_rows.append([N if i == k else _sage_const_0  for i in range(k)])
    M = matrix(ZZ, polynomial_rows)
    B = M.LLL()

    v = B[_sage_const_0 ] # the first polynomial in the basis (took this part from the author's official solve)
    Q = _sage_const_0 
    for (s, i) in enumerate(list(range(_sage_const_0 , len(v), _sage_const_2 ))):
        z = v[i] / (R_r**s) + v[i+_sage_const_1 ] / (R_s**s) * I
        Q += z * x**s
    return Q



f = x + a
# k = 20 was the first one that worked lol
Q = coppersmith(f, _sage_const_10 **_sage_const_70 , _sage_const_10 **_sage_const_68 , N, k=_sage_const_20 )

p = a + Q.roots()[_sage_const_0 ][_sage_const_0 ]

print(f"p = {p}")
p = GaussianRational(Fraction(p.real()), Fraction(p.imag()))
N = GaussianRational(Fraction(N.real()), Fraction(N.imag()))
q = N / p
p_norm = int(p.real*p.real + p.imag*p.imag)
q_norm = int(q.real*q.real + q.imag*q.imag)
tot = (p_norm - _sage_const_1 ) * (q_norm - _sage_const_1 )
d = pow(e, -_sage_const_1 , tot)
m = decrypt(ciphertext, (N, d))

print(unhexlify(m.real) + unhexlify(m.imag))

